                How To Install mod_authnz_certs.c
		           Version 0.0.2

NOTES:

 * These instructions are for Apache version 2.2.  This version of
   mod_authnz_certs will not work with older versions of Apache.
   Other versions are available for different releases of Apache:

     Apache 2.2   mod_authnz_certs-0.0.2

   You can check your apache version by running it from the command line
   with the -v flag.

 * There are two ways of installing mod_authnz_certs on a Unix system. 

     (1) You can statically link it with Apache.  This requires rebuilding
	 Apache in such a way that mod_authnz_certs will be compiled in. 

     (2) You can make mod_authnz_certs a dynamically loaded module.  If
	 your Apache has been built to support dynamically loaded modules
	 you can do this without rebuilding Apache, so it is pretty easy.
	 Performance may be slightly worse with this option.  For information
	 on dynamically loaded modules see http://www.apache.org/docs/dso.html

   Instructions for both options are given here.  The dynamic loading
   option will probably be prefered on virtually all modern installations.

 * There is also documentation in the README file and in the AUTHENTICATORS
   file.  If you find this document unclear, reading those may help.


INSTALL METHOD A: Dynamically Linking Mod_auth_certs using apxs:
-------------------------------------------------------------------

Step 1:
	Ensure that your Apache server is configured to handle dynamically
	loaded modules.  To check this, run Apache server with the -l command
	flag, like

	       httpd -l

	If mod_so.c is one of the compiled-in modules, then you are ready
	to go.  Note that some installations may give the http daemon different
	names, like 'apache' or 'httpd2'.  Some may have multiple copies of
	apache sitting in different directories.  Be sure you looking at the
	one that is being run.

Step 2:
	Compile the module using the following command in the
	mod_authnz_certs distribution directory:

		apxs -c mod_authnz_certs.c

	'Apxs' is the Apache extension tool.  It is part of the standard
	Apache distribution.  If you don't have it, then there may be a
	Apache development package that needs to be installed on your system,
	or your Apache server may not be set up for handling dynamically
	loaded modules.  Some systems rename it weirdly, like 'apxs2' in
	some openSUSE distributions.

 
Step 3:
	Install the module.  Apxs can do this for you too.  Do the following
	command (as root so you can write to Apache's directories and config
	files):

	       apxs -i -a mod_authnz_certs.la

	This will create mod_authnz_certs.so and copy it into the proper
	place, and add appropriate AddModule and LoadModule commands to the
	configuration files.  (Actually, it may get the LoadModule command
	wrong.  See below.)

Step 4:
	Go to the CONFIGURATION instructions below.


INSTALL METHOD B: Statically Linking
------------------------------------

Step 1:
	Read the instructions on how to configure the Apache server in the
	INSTALL file provided with the Apache source.

Step 2:
	When you run the ./configure script, include an --with-module flag,
	giving the full pathname to the mod_authnz_certs.c file in this
	distribution.  For example, if you have unpacked this distribution
	in /usr/local/src/mod_authnz_certs and are building Apache for
	installation in /usr/local/apache, you might do:

    ./configure --prefix=/usr/local/apache \
      --with-module=aaa:/usr/local/src/mod_authnz_certs/mod_authnz_certs.c

	This will copy the mod_authnz_certs.c file into the correct place in
	the Apache source tree and set things up to link it in.

Step 3:
	Type "make" to compile Apache and "make install" to install it.

Step 4:
	Go to the CONFIGURATION instructions below.


CONFIGURATION:
--------------

There are three parts to doing the configuration.  First, if you are using
dynamic loading, you need to configure Apache to load the mod_authnz_certs
module.  If 'apxs' is working correctly, it should do this for you
automatically, but it doesn't always.

Second you define the external program and communication method to use in
your httpd.conf file, identifying them with a keyword.

Finally you set up specific directories to use that authenticator, referencing
it by keyword.

These instructions talk about editing the "httpd.conf" file, as it appears in
the standard Apache distributions.  In many version of Linux, however, this
file will actually just include a lot of other configuration files, some of
which may be automatically generated by various GUI configuration tools.  I
include notes on some of these variations that I have encountered, but you
may need to do some of your own figuring to find out how to adapt these
instructions to your server configuration.

(1) Configuring Module Loading:

    This step is only required if you are using dynamic loading.  In theory,
    apxs will have done it for you.  If you are trustful, you can skip ahead
    to step 2 and only come back to this if things don't seem to be working.
    In cases where you are using multiple non-authoritative authenticators
    you'll probably want to check this manually, even if apxs works right, to
    ensure that the modules are loaded (and thus envoked) in the desired order.

    (a) First, you should make sure that there is a proper "LoadModule"
	command in the httpd.conf file.  This should have been put there
	by 'apxs' but, some older Linux distributions, like Redhat 6.1,
	messed it up.  Basically, the 'LoadModule' command should look a
	lot like all the other LoadModule commands.  Something like

	    LoadModule authnz_certs_module modules/mod_authnz_certs.so

	where the second part is the path from Apache's root directory
	to the location where the module was stored by apxs.

	Make sure that apxs didn't put this directive inside any inappropriate
	<IfDefine> directives, as some Redhat versions have done in the past.

	If you previously had mod_authnz_certs or mod_auth_certs
	installed and are installing a new version, you may have more than
	one LoadModule command into httpd.conf.  You only need one.  Get rid
	of the old ones.

    (b) Check you httpd.conf file to see if there is a "ClearModuleList"
	command.  If this exists, then you need to add a command like:

	    AddModule mod_authnz_certs.c

	somewhere below "ClearModuleList" command (probably somewhere among
	the dozens of other AddModule commands).  If you used 'apxs' to
	install mod_authnz_certs, then this should already be done, but
	it may again be stashed in an inappropriate <IfDefine>.

	The standard Apache configuration files don't have a "ClearModuleList"
	command and don't need an "AddModule" command.  However the standard
	RedHat configuration files, among others, do.

(2) Configuration example - LDAP Auth or Certificate 


SSLEngine               on
SSLVerifyDepth          10

SSLVerifyClient      optional
SSLOptions           +ExportCertData +StdEnvVars +StrictRequire +FakeBasicAuth

RewriteEngine        on
RewriteCond          %{HTTPS} !=on
RewriteRule          ^/secure https://%{HTTP_HOST}%{REQUEST_URI} [L,R=permanent]

<Location /secure>
  SSLRequire             %{SSL_CIPHER_USEKEYSIZE} >= 128

  AuthType                basic
  AuthName                "Secure Area"
  AuthBasicProvider       ldap certs

  
  AuthLDAPURL             "ldap://ldap/ou=People, o=CIA?cn"
  AuthzLDAPAuthoritative  off

  CertsAuthoritative off
  CertsSSLUsernameOverride SSL_CLIENT_S_DN_CN

  Require              valid-user
  
</Location>

